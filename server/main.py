import asyncio
import websockets
import json
from user_state import UserState

"""
This is the entry file to the agent server implementation. 
The python file sets up the websocket connection and the user state for maintenance.
The file sends the chat window url on initialization to the front end.
The file listens to the messages on websocket and saves them to userState.
"""

#  Global variables and data structure
chat_window_URL = "",
user_state = UserState()


async def initialize_agent_server(websocket):
    """
    Initializes the agent server and sends the chat window URL.
    :param websocket: socket generated by the connection
    """
    # Call the methods to run asynchronously here. pass the user_state to keep track of data
    # run_methods(user_state)

    #  grab user_state when ever actions and global user state model is required.

    global chat_window_URL
    try:
        # Fetch the chat window URL dynamically (placeholder function)

        # Replace with actual method
        # chat_window_URL = method_to_get_chat_window_url()
        await websocket.send(chat_window_URL)
        print("Chat window URL sent to client.")
    except Exception as e:
        print(f"Error initializing agent server: {e}")


# Message handler for incoming message over the WebSocket.
async def handler(websocket):
    """
    Handles incoming Websocket messages and maintains the user state.
    :param websocket: socket generated by the connection
    """
    try:
        # Assigning websocket to user state to be used globally.
        user_state.set_socket(websocket)
        print("New Websocket connection established");

        # Initialize the agent server for this connection
        await initialize_agent_server(websocket)

        async for message in websocket:
            try:
                # PArse the incoming message
                message = json.loads(message)
                # Process C2STEM physics actions
                if message['type'] == "action":
                    user_state.add_actions(str(message['data']))
                    print(f"Action added: {message['data']}")
                # Update the user model
                elif message['type'] == "state":
                    user_state.set_user_model(str(message['data']))
                    print(f"User model updated: {message['data']}")
                else:
                    await websocket.send(message['data'])
            except json.JSONDecoderError:
                await websocket.send(json.dumps({"type": "error", "data": "Invalid JSON format."}))
                print("Invalid message type received")
    except websockets.exceptions.ConnectionClosed as e:
        print(f"WebSocket connection closed: {e}")
    except Exception as e:
        print(f"Error in handler: {e}")
async def main():
    """
    Starts the Websocket server and runs indefinitely.
    """
    print("Starting WebSocket server on ws://localhost:8080")
    async with websockets.serve(handler, "localhost", 8080):
        try:
            await asyncio.Future()  # run forever
        except KeyboardInterrupt:
            print("Shutting down the WebSocket server")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"Error running the server: {e}")